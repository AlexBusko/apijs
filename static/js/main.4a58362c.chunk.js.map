{"version":3,"sources":["components/Twitter/twitter.js","components/Reddit/reddit.js","components/GitHub/github.js","App.js","reportWebVitals.js","index.js"],"names":["Twitter","useState","count","setCount","q","setQuery","className","onSubmit","e","console","log","preventDefault","placeholder","type","value","onChange","target","Reddit","GitHub","userInput","setUserInput","name","setName","login","setLogin","avatar","setAvatar","location","setLocation","company","setCompany","bio","setBio","followers","setFollowers","following","setFollowing","error","setError","welcome","setWelcome","setData","avatar_url","useEffect","localStorage","getItem","JSON","parse","fetch","then","res","json","data","message","setItem","stringify","removeItem","src","alt","App","basename","to","activeClassName","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a58362c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.scss\";\n\n\n\nconst Twitter = () => {\n    const [count, setCount] = useState(5);\n    const [q, setQuery] = useState(\"\");\n\n    const handleSubmit = (e) => {\n        console.log(count, q)\n        e.preventDefault()\n    }\n\n    return (\n        <div className=\"twitter\">\n            <div className=\"input-side\" >\n                <form onSubmit={handleSubmit}>\n                    <input className=\"input\" placeholder=\"search count\" type=\"text\" value={count} onChange={(e) => setCount(e.target.value)}></input>\n                    <input className=\"input\" placeholder=\"search query\" type=\"text\" value={q} onChange={(q) => setQuery(q)}></input>\n                    <button type=\"submit\"></button>\n                </form>\n                <div className=\"list\">\n                    <div></div>\n                </div>\n            </div>\n            <div className=\"result\">\n                <div className=\"twets\"></div>\n                <div className=\"twets\"></div>\n            </div>\n            <div></div>\n        </div >\n    );\n}\n\nexport default Twitter","import React from \"react\";\n\n\n\nconst Reddit = () => {\n    return (\n        <div>Reddit</div>\n    );\n}\n\nexport default Reddit","import React, { useEffect, useState } from \"react\";\nimport \"./style.scss\";\n\n\nconst GitHub = () => {\n    const [userInput, setUserInput] = useState(\"\")\n    const [name, setName] = useState(\"\");\n    const [login, setLogin] = useState(\"\");\n    const [avatar, setAvatar] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [company, setCompany] = useState(\"\");\n    const [bio, setBio] = useState(\"\");\n    const [followers, setFollowers] = useState(\"\");\n    const [following, setFollowing] = useState(\"\");\n    const [error, setError] = useState(null);\n    const [welcome, setWelcome] = useState(\"\")\n\n    const setData = ({ login, name, avatar_url, location, company, bio, followers, following }) => {\n        setName(name);\n        setLogin(login)\n        setAvatar(avatar_url);\n        setLocation(location);\n        setCompany(company);\n        setBio(bio);\n        setFollowers(followers)\n        setFollowing(following)\n\n    }\n\n    useEffect(() => {\n        if (localStorage.getItem(\"data\")) {\n            setData(JSON.parse(localStorage.getItem(\"data\")))\n        } else if (localStorage.getItem(\"message\")) {\n            setError(JSON.parse(localStorage.getItem(\"message\")))\n        } else {\n            setWelcome(\"Please enter github login in the search field above\")\n        }\n    }, [])\n\n    const handleSearch = (e) => {\n        setUserInput(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        fetch(`http://api.github.com/users/${userInput}`)\n            .then(res => res.json())\n            .then(data => {\n                if (data.message) {\n                    localStorage.setItem(\"message\", JSON.stringify(data.message));\n                    setError(JSON.parse(localStorage.getItem(\"message\")))\n                    localStorage.removeItem(\"data\")\n                }\n                else {\n                    localStorage.setItem(\"data\", JSON.stringify(data))\n                    setData(JSON.parse(localStorage.getItem(\"data\")))\n                    localStorage.removeItem(\"message\")\n                    setError(null)\n                }\n            })\n        e.preventDefault()\n    }\n\n    return (\n        <div className=\"github\">\n            <div className=\"search\">\n                <form onSubmit={handleSubmit}>\n                    <input className=\"input\" placeholder=\"GitHub login\" type=\"text\" onChange={handleSearch} />\n                    <input className=\"button\" type=\"submit\" value=\"Search\" />\n                </form>\n            </div>\n            { error !== null ? <div className=\"error\"><h1>{error}</h1></div> : (login ?\n                <div className=\"result\">\n                    <div className=\"avatar\">\n                        <img src={avatar} alt=\"avatar\" className=\"logo\" />\n                    </div>\n                    <div className=\"info\" >\n                        {name && <h1>{name}</h1>}\n                        <p>Login: {login}</p>\n                        {location && <p>Location: {location}</p>}\n                        {company && <p>Company: {company}</p>}\n                        {bio && <p>Bio: {bio}</p>}\n                        {followers !== 0 && <p>Followers: {followers}</p>}\n                        {following !== 0 && <p>Following: {following}</p>}\n                    </div>\n                </div>\n                : welcome && <div className=\"welcome\">\n                    <h1>{welcome}</h1>\n                </div>)\n            }\n        </div>\n    );\n}\n\nexport default GitHub","import './App.scss';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport Twitter from \"./components/Twitter/twitter\"\nimport Reddit from \"./components/Reddit/reddit\"\nimport GitHub from \"./components/GitHub/github\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename=\"/\">\n        <header className=\"App-header\">\n\n          <NavLink to=\"/twitter\" activeClassName=\"active-nav\" className=\"nav\">Twitter</NavLink>\n\n          <NavLink to=\"/github\" activeClassName=\"active-nav\" className=\"nav\">GitHub</NavLink>\n\n          <NavLink to=\"/reddit\" activeClassName=\"active-nav\" className=\"nav\">Reddit</NavLink>\n\n        </header>\n\n        <Switch>\n          <Route path=\"/twitter\">\n            <Twitter />\n          </Route>\n          <Route path=\"/reddit\">\n            <Reddit />\n          </Route>\n          <Route path=\"/github\">\n            <GitHub />\n          </Route>\n        </Switch>\n      </Router>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}